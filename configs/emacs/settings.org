#+title: Emacs settings file

* Basics
** Winner redo/undo
Winner mode to go back/forward when interacting with windows.
#+BEGIN_SRC emacs-lisp
  (winner-mode +1)
  (define-key winner-mode-map (kbd "C-c u") 'winner-undo)
  (define-key winner-mode-map (kbd "C-c U") 'winner-redo)
#+END_SRC
** Undo/Redo
Use the undo-fu package to not have Emacs' confusing undo/redo functionality.
#+BEGIN_SRC emacs-lisp
  (use-package undo-fu)
#+END_SRC
** Zoom window to full frame
#+BEGIN_SRC emacs-lisp
  (use-package zoom-window
    :config
    (custom-set-variables '(zoom-window-mode-line-color "#bf8ead"))
    :bind
    ("C-x x" . zoom-window-zoom))
#+END_SRC
** String manipulation
String manipulation library =s= from [[https://github.com/magnars/s.el]].
#+BEGIN_SRC emacs-lisp
  (use-package s)
#+END_SRC
** Tabs
Tabs help organize window setups.
It is convenient to have tabs for that purpose, like a mail tab, a development tab, and so on.

Use the prefix =C-x t= to see the usual tab commands.
Most common are probably:
- =C-x t 2=: Create new tab
- =C-x t r=: Rename a tab
- =C-x t RET=: Choose tabs by name

I do not ever want to see the tab-bar at the top of the frame.
#+BEGIN_SRC emacs-lisp
  (setq tab-bar-show nil)
#+END_SRC
** Multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :config
    (global-set-key (kbd "C-S-m l") 'mc/edit-lines)
    (global-set-key (kbd "C-S-m n") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-S-m p") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-S-m m") 'mc/mark-all-like-this)
    ;; Make <return> enter a newline:
    (define-key mc/keymap (kbd "<return>") nil))
#+END_SRC
* Org
** Org
The built-in version of Org is outdated and not sufficient for Org-Roam.
Thanks to the straight package manager, we can use a simple ~use-package~ and straight will replace the built-in version with the latest version from ELPA.
However, we must load org already in ~init.el~ in order to load the package before it is used to load this file.

For org, use ~indented~ to show sub-items indented instead of all the leading asterisks.
Hide emphasis markers and only use font face change as indication.

Org-super-agenda and org-ql do not support tag groups. So it doesn't make sense to set them up.
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t
        org-pretty-entities t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-image-acual-width '(300))
#+END_SRC

=!= means the timestamp is recorded when switching to this state.
=@= means a note must be recorded when switching to this state.
If asked for a note, you can only record the timestamp by =C-c C-c= on the empty prompt.
=/!= means a timestamp should be recorded when /leaving/ that state.
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((type "TODO(t)" "TODAY(y!)" "WAITING(w@/!)" "FOLLOWUP(f@/!)" "|" "DONE(d!)" "DELEGATED(l@)" "ABANDONED(a@)")))
#+END_SRC

Make sure that tasks with sub-tasks or a sub-checklist cannot be marked done, if the sub-tasks/list aren't done.
#+BEGIN_SRC emacs-lisp
  (setq org-enforce-todo-dependencies t
        org-enforce-todo-checkbox-dependencies t)
#+END_SRC

Insert state change notes and time stamps into a drawer.
#+BEGIN_SRC emacs-lisp
  (setq org-log-into-drawer t)
#+END_SRC

Show Monday as first day of week.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-start-on-weekday 1)
  (setq calendar-week-start-day 1)
#+END_SRC

Use org-appear to show emphasis-markers, which are hidden otherwise, when the cursor is on them.
#+BEGIN_SRC emacs-lisp
  (use-package org-appear
    :hook (org-mode . org-appear-mode))
#+END_SRC
Use org-superstar to make the bullets look nicer.
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+END_SRC
*** Org Agenda
If org agenda gets slow, check out how others limit the number of notes to only those that actually contain TODOs.
There is lots of info on the interwebs.

Org agenda should get files from the org directory as well as the daily directory of =org-roam-dailies=.
#+BEGIN_SRC emacs-lisp
    (setq org-agenda-files
          (directory-files-recursively "~/Documents/org/" "\\.org$"))
#+END_SRC
Also add a hook so that the list is re-created on every agenda.
It could be the case that new files were added in the meantime, which would not be considered by org-agenda otherwise.
Note the removal of files that contain =.#= in their name.
These are temporary files which I assume are created by org or org-roam.
Org-agenda would complain any time it doesn't find these files anymore.
Therefore we take them out of the list of files.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-agenda-mode-hook
    (lambda ()
      (setq org-agenda-files
            (cl-delete-if
             (lambda (f)
               (string-match-p "\\.#" f))
               (directory-files-recursively "~/Documents/org/" "\\.org$")))))
#+END_SRC

Do not show DONE items in the agenda.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t)
#+END_SRC
** Org Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  ;; Unbind the key combination that is used by multiple-cursors.
  (define-key org-mode-map (kbd "C-S-m") nil)
#+END_SRC
** Org-QL
Org query language to build agenda-like views based on an input query.
#+BEGIN_SRC emacs-lisp
  (use-package org-ql)
#+END_SRC
** Org-Super-Agenda
Org super agenda groups agendas into groups based on its configuration.
All groups must be configured here using the project's syntax.
Super agenda does not support tag groups, that's why we have to list *all* relevant tags.
#+BEGIN_SRC emacs-lisp
  ;; (use-package org-super-agenda
  ;;   :config
  ;;   (setq org-super-agenda-groups '(
  ;;                                   (:name "Today"
  ;;                                    :scheduled today
  ;;                                    :scheduled past
  ;;                                    :deadline today
  ;;                                    :deadline past)
  ;;                                   (:name "Futurice"
  ;;                                    :and (:tag "futurice"
  ;;                                    :not (:todo ("WAITING" "FOLLOWUP"))))
  ;;                                   (:name "Private"
  ;;                                    :and (:tag "private"
  ;;                                    :not (:todo ("WAITING" "FOLLOWUP"))))
  ;;                                   (:name "Follow-up"
  ;;                                    :todo "FOLLOWUP")
  ;;                                   (:name "Waiting"
  ;;                                    :todo "WAITING"))))
  ;; (org-super-agenda-mode)
#+End_SRC
** Org-Roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :after org
    :config
    (setq org-roam-directory (file-truename "~/Documents/org")
          org-roam-dailies-directory "daily/"
          org-roam-dailies-capture-templates
          '(("d" "default" entry
             "* %?"
             :target (file+head "%<%Y-%m-%d>.org"
                                "#+title: %<%Y-%m-%d>\n"))))
    (org-roam-db-autosync-mode)
    (add-to-list 'display-buffer-alist
         '("\\*org-roam\\*"
           (display-buffer-in-direction)
           (direction . right)
           (window-width . 0.33)
           (window-height . fit-window-to-buffer)))
    :bind
    ("C-c o i" . org-roam-node-insert)
    ("C-c o f" . org-roam-node-find)
    ("C-c o n" . org-roam-id-get-create)
    ("C-c o c" . org-roam-capture)
    ("C-c o b" . org-roam-buffer-toggle)
    ("C-c o a" . org-roam-alias-add)
    ("C-c o r" . org-roam-ref-add)
    ("C-c o g" . org-roam-dailies-goto-date)
    ("C-c o t" . org-roam-dailies-goto-today))
#+END_SRC

Automatically open and close the org-roam buffer when opening an org-roam file.
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'find-file-hook
  ;;           (lambda ()
  ;;             (and (org-roam-file-p)
  ;;                  (not (eq 'visible (org-roam-buffer--visibility)))
  ;;                '  (org-roam-buffer-toggle))))
#+END_SRC
** Org-Roam-Ui
#+BEGIN_SRC emacs-lisp
  (use-package org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+END_SRC
** Deft
Show and filter org-roam notes by contained text.
#+BEGIN_SRC emacs-lisp
  (use-package deft
    :after org-roam
    :bind
    ("C-c o d" . deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-use-filename-as-title t)
    (deft-default-extension "org")
    (deft-directory org-roam-directory)
    (deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n"))
#+END_SRC
** Quality of life improvements
*** Agenda categories
[[https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html][Source]]. Vulpea functions are also available [[https://github.com/d12frosted/vulpea][here]].
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-prefix-format
        '((agenda . " %i %(vulpea-agenda-category 12)%?-12t% s")
          (todo . " %i %(vulpea-agenda-category 12) ")
          (tags . " %i %(vulpea-agenda-category 12) ")
          (search . " %i %(vaulpea-agenda-category 12) ")))

  (defun vulpea-agenda-category (&optional len)
    "Get category of item at point for agenda.

  Category is defined by one of the following items:

  - CATEGORY property
  - TITLE keyword
  - TITLE property
  - filename without directory and extension

  When LEN is a number, resulting string is padded right with
  spaces and then truncated with ... on the right if result is
  longer than LEN.

  Usage example:

    (setq org-agenda-prefix-format
          '((agenda . \" %(vulpea-agenda-category) %?-12t %12s\")))

  Refer to `org-agenda-prefix-format' for more information."
    (let* ((file-name (when buffer-file-name
                        (file-name-sans-extension
                         (file-name-nondirectory buffer-file-name))))
           (title (vulpea-buffer-prop-get "title"))
           (category (org-get-category))
           (result
            (or (if (and
                     title
                     (string-equal category file-name))
                    title
                  category)
                "")))
      (if (numberp len)
          (s-truncate len (s-pad-right len " " result))
        result)))
  (defun vulpea-buffer-prop-get (name)
    "Get a buffer property called NAME as a string."
    (org-with-point-at 1
      (when (re-search-forward (concat "^#\\+" name ": \\(.*\\)")
                               (point-max) t)
        (buffer-substring-no-properties
         (match-beginning 1)
         (match-end 1)))))
#+END_SRC
* Help
Show all available key-bindings in the mini buffer.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

Company for auto-completion.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (setq company-idle-delay 0
          company-minimum-prefix-length 1
          company-selection-wrap-around t))
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC
* Visuals
** Window
Remove startup message, tool bar, menu bar, and scroll bar.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Fonts
Set a default font for all windows.
#+BEGIN_SRC emacs-lisp
  (set-frame-font "DejaVuSansMono Nerd Font Mono 11" nil t)
#+END_SRC
Show whitespaces everywhere
#+BEGIN_SRC emacs-lisp
  (global-whitespace-mode 1)
#+END_SRC

*** TODO Use a variable pitch (non-monospaced) font for org-mode, but not for code blocks inside org.
** Theme
Use the =describe-char= command to find out about font faces.
Changes from there will be written to the auto-generated config file.

*** Nord theme
#+BEGIN_SRC emacs-lisp
  (use-package nord-theme
    :config
    (load-theme 'nord t))
#+END_SRC

Override some faces in order for them to appear correctly:
#+BEGIN_SRC emacs-lisp
      (custom-set-faces
        ;; Fix the dimmed todo-face to be actually dimmed instead of having a bright yellow background.
        '(org-agenda-dimmed-todo-face ((t (:background "#2e3440" :foreground "#4c566a"))))
        ;; Highlight the current line number
        '(line-number-current-line((t (:background "#4c566a" :foreground "#88c0d0")))))
#+END_SRC
** Mode Line
I no longer use powerline, as there wasn't an easy way to compress the list of minor modes.
The minions package did not work with powerline.
I decided to go with the regular modeline for now, as it also contains everything that I need.

Show the column in the mode line in addition to the line number.
#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
#+END_SRC

Hide minority modes from mode line and put them in the minions menu.
#+BEGIN_SRC emacs-lisp
  (use-package minions
    :config (minions-mode 1))
#+END_SRC

*** TODO Compress minority modes in powerline
The ~minions~ package does not work with powerline.
* IDE Features
Counsel, Ivy, and Swipe for more complete completion and filtering.
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :config
    (ivy-mode 1)
    (counsel-mode 1)
    (setq ivy-use-virtual-buffers t
          ivy-count-format "(%d/%d) "
          ivy-re-builders-alist
        '((t . ivy--regex-ignore-order)))
        (global-set-key (kbd "C-s") 'swiper-isearch)
        (global-set-key (kbd "M-x") 'counsel-M-x)
        (global-set-key (kbd "C-x C-f") 'counsel-find-file)
        (global-set-key (kbd "M-y") 'counsel-yank-pop)
        (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
        (global-set-key (kbd "C-c v") 'ivy-push-view)
        (global-set-key (kbd "C-c V") 'ivy-pop-view)
        (global-set-key (kbd "C-c g") 'counsel-rg)
        (global-set-key (kbd "C-c m") 'counsel-linux-app)
        (global-set-key (kbd "C-c n") 'counsel-fzf)
        (global-set-key (kbd "C-x l") 'counsel-locate)
        (global-set-key (kbd "C-c J") 'counsel-file-jump)
        (global-set-key (kbd "C-c C-r") 'ivy-resume)
        (global-set-key (kbd "C-c b") 'counsel-bookmark)
        (global-set-key (kbd "C-c c") 'counsel-outline)
        (global-set-key (kbd "C-c F") 'counsel-org-file))
#+END_SRC

Projectile for project navigation.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))

  (use-package counsel-projectile
    :config
    (counsel-projectile-mode 1))
#+END_SRC

Prescient for faster candidate filtering.
#+BEGIN_SRC emacs-lisp
  (use-package prescient
    :config
    (prescient-persist-mode))
  (use-package ivy-prescient
    :after ivy
    :config
    (ivy-prescient-mode))
  (use-package company-prescient
    :after company
    :config
    (company-prescient-mode))
#+END_SRC

Magit for git integration.
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC
* Programming
** Checking and linting
Flycheck for all languages to do diagnostics in-line.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))
#+END_SRC
** General coding environment
#+BEGIN_SRC emacs-lisp
  ;; Add line numbers in all programming modes.
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  ;; Highlight numerals
  (use-package highlight-numbers
    :config
    (add-hook 'prog-mode-hook 'highlight-numbers-mode))
#+END_SRC
** YAML
#+BEGIN_SRC emacs-lisp
  ;; YAML
  (use-package yaml-mode)
#+END_SRC
** JSON
#+BEGIN_SRC emacs-lisp
  (use-package json-mode)
#+END_SRC
** Web Mode (incl. =TSX=)
#+BEGIN_SRC emacs-lisp
  ;; Web Mode for all things web.
  (use-package web-mode
    :commands web-mode
    :mode
    (("\\.js\\'" . web-mode)
     ("\\.jsx\\'" . web-mode)
     ("\\.ts\\'" . web-mode)
     ("\\.tsx\\'" . web-mode)
     ("\\.css\\'" . web-mode)
     ("\\.html\\'" . web-mode))
    :config
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
    (add-hook 'web-mode-hook
              (lambda ()
                (when (string-equal "tsx" (file-name-extension buffer-file-name))
                  (setup-tide-mode))))
    (flycheck-add-mode 'typescript-tslint 'web-mode))
#+END_SRC
** Terminal
Use ~vterm~ as terminal inside emacs.
To start a new terminal when one is already running, use =prefix + M-x vterm=.
Use ~C-c C-c~ to send ~C-c~ to terminal.
#+BEGIN_SRC emacs-lisp
  (use-package vterm)
#+END_SRC

Use =multi-vterm= to easier manage =vterm= buffers.
#+BEGIN_SRC emacs-lisp
  (use-package multi-vterm
    :config
   (global-set-key (kbd "C-c t t") #'multi-vterm)
   (global-set-key (kbd "C-c t n") #'multi-vterm-next)
   (global-set-key (kbd "C-c t p") #'multi-vterm-prev))
#+END_SRC
** Tide
#+BEGIN_SRC emacs-lisp
  (use-package tide
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           (before-save . tide-format-before-save)))
#+END_SRC
** NPM
#+BEGIN_SRC emacs-lisp
  (use-package npm-mode)
#+END_SRC
** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook
    ((web-mode . lsp-deferred)
     (typescript-mode . lsp-deferred)
     (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp-deferred
    :config
    (setq lsp-log-io nil ;; No logging to improve perfomance
          lsp-keymap-prefix "C-c l"
          lsp-restart 'auto-restart))
  (use-package lsp-ui
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-sideline-show-diagnostics t))
  (use-package lsp-ivy)
#+END_SRC
** Tree Sitter
#+BEGIN_SRC emacs-lisp
  (use-package tree-sitter)
  (use-package tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'web-mode-hook 'tree-sitter-hl-mode)
  (add-hook 'typescript-mode-hook 'tree-sitter-hl-mode)
#+END_SRC
