#+title: Emacs settings file

* Basics
** Winner redo/undo
Winner mode to go back/forward when interacting with windows using ~M-left/M-right~.
#+BEGIN_SRC emacs-lisp
  (winner-mode +1)
  (define-key winner-mode-map (kbd "<M-left>") #'winner-undo)
  (define-key winner-mode-map (kbd "<M-right>") #'winner-redo)
#+END_SRC
** Undo/Redo
Use the undo-fu package to not have Emacs' confusing undo/redo functionality.
#+BEGIN_SRC emacs-lisp
  (use-package undo-fu)
#+END_SRC
** Zoom window to full frame
#+BEGIN_SRC emacs-lisp
  (use-package zoom-window
    :config
    (custom-set-variables '(zoom-window-mode-line-color "#bf8ead"))
    :bind
    ("C-x x" . zoom-window-zoom))
#+END_SRC
* Org, Org-Roam, and productivity
** Org
The built-in version of Org is outdated and not sufficient for Org-Roam.
Thanks to the straight package manager, we can use a simple ~use-package~ and straight will replace the built-in version with the latest version from ELPA.
However, we must load org already in ~init.el~ in order to load the package before it is used to load this file.

For org, use ~indented~ to show sub-items indented instead of all the leading asterisks.
Hide emphasis markers and only use font face change as indication.

Org-super-agenda and org-ql do not support tag groups. So it doesn't make sense to set them up.
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t
        org-pretty-entities t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-image-acual-width '(300))
  (setq org-todo-keywords '((type "TODO(t)" "WAITING(w)" "FOLLOWUP(f)" "|" "DONE(d)" "DELEGATED(l)" "ABANDONED(a)")))
  (setq org-agenda-files (directory-files-recursively "~/Documents/org/" "\\.org$"))
#+END_SRC

Use org-appear to show emphasis-markers, which are hidden otherwise, when the cursor is on them.
#+BEGIN_SRC emacs-lisp
    (use-package org-appear
      :hook (org-mode . org-appear-mode))
#+END_SRC
Use org-superstar to make the bullets look nicer.
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+END_SRC
** Org Keybindings
#+BEGIN_SRC emacs-lisp
#+END_SRC
** Org-QL
Org query language to build agenda-like views based on an input query.
#+BEGIN_SRC emacs-lisp
  (use-package org-ql)
#+END_SRC
** Org-Super-Agenda
Org super agenda groups agendas into groups based on its configuration.
All groups must be configured here using the project's syntax.
Super agenda does not support tag groups, that's why we have to list *all* relevant tags.
#+BEGIN_SRC emacs-lisp
  (use-package org-super-agenda
    :config
    (setq org-super-agenda-groups '(
                                    (:name "Today"
                                     :scheduled today
                                     :scheduled past
                                     :deadline today
                                     :deadline past)
                                    (:name "Futurice"
                                     :and (:tag "futurice"
                                     :not (:todo ("WAITING" "FOLLOWUP"))))
                                    (:name "Private"
                                     :and (:tag "private"
                                     :not (:todo ("WAITING" "FOLLOWUP"))))
                                    (:name "Follow-up"
                                     :todo "FOLLOWUP")
                                    (:name "Waiting"
                                     :todo "WAITING"))))
  (org-super-agenda-mode)
#+End_SRC
** Org-Roam
Use ~<leader>wu~ and ~<leader>wU~ to go back and forth in the windows (bound earlier).
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :after org
    :config
    (setq org-roam-directory (file-truename "~/Documents/org")
    org-roam-dailies-directory "daily/"
    org-roam-dailies-capture-templates
    '(("d" "default" entry
       "* %?"
       :target (file+head "%<%Y-%m-%d>.org"
                          "#+title: %<%Y-%m-%d>\n"))))
    (org-roam-db-autosync-mode)
    (add-to-list 'display-buffer-alist
         '("\\*org-roam\\*"
           (display-buffer-in-direction)
           (direction . right)
           (window-width . 0.33)
           (window-height . fit-window-to-buffer)))
    :bind
    ("C-c o i" . org-roam-node-insert)
    ("C-c o f" . org-roam-node-find)
    ("C-c o n" . org-roam-id-get-create)
    ("C-c o c" . org-roam-capture)
    ("C-c o b" . org-roam-buffer-toggle)
    ("C-c o a" . org-roam-alias-add)
    ("C-c o r" . org-roam-ref-add)
    ("C-c o t" . org-roam-dailies-goto-today))
#+END_SRC
** Deft
Show and filter org-roam notes by contained text.
#+BEGIN_SRC emacs-lisp
  (use-package deft
    :after org-roam
    :bind
    ("C-c o d" . deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-use-filename-as-title t)
    (deft-default-extension "org")
    (deft-directory org-roam-directory)
    (deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n"))
#+END_SRC
* Help
Show all available key-bindings in the mini buffer.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

Company for auto-completion.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (setq company-idle-delay 0
          company-minimum-prefix-length 4
          company-selection-wrap-around t))
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC
* Visuals
** Window
Remove startup message, tool bar, menu bar, and scroll bar.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Fonts
Set a default font for all windows.
#+BEGIN_SRC emacs-lisp
  (set-frame-font "DejaVuSansMono Nerd Font Mono 11" nil t)
#+END_SRC
Show whitespaces everywhere
#+BEGIN_SRC emacs-lisp
  (global-whitespace-mode 1)
#+END_SRC

*** TODO Use a variable pitch (non-monospaced) font for org-mode, but not for code blocks inside org.
** Theme
#+BEGIN_SRC emacs-lisp
(use-package nord-theme
  :config
  (load-theme 'nord t))
#+END_SRC
** Mode Line
Modeline that looks like power line.
Supported by nord theme.
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :config
    (powerline-default-theme))
  (setq column-number-mode t)
#+END_SRC
* IDE Features
Counsel, Ivy, and Swipe for more complete completion and filtering.
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :config
    (ivy-mode 1)
    (counsel-mode 1)
    (setq ivy-use-virtual-buffers t
          ivy-count-format "(%d/%d) "
          ivy-re-builders-alist
        '((t . ivy--regex-ignore-order)))
        (global-set-key (kbd "C-s") 'swiper-isearch)
        (global-set-key (kbd "M-x") 'counsel-M-x)
        (global-set-key (kbd "C-x C-f") 'counsel-find-file)
        (global-set-key (kbd "M-y") 'counsel-yank-pop)
        (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
        (global-set-key (kbd "C-c v") 'ivy-push-view)
        (global-set-key (kbd "C-c V") 'ivy-pop-view)
        (global-set-key (kbd "C-c g") 'counsel-rg)
        (global-set-key (kbd "C-c m") 'counsel-linux-app)
        (global-set-key (kbd "C-c n") 'counsel-fzf)
        (global-set-key (kbd "C-x l") 'counsel-locate)
        (global-set-key (kbd "C-c J") 'counsel-file-jump)
        (global-set-key (kbd "C-c C-r") 'ivy-resume)
        (global-set-key (kbd "C-c b") 'counsel-bookmark)
        (global-set-key (kbd "C-c l") 'counsel-outline)
        (global-set-key (kbd "C-c F") 'counsel-org-file))
#+END_SRC

Projectile for project navigation.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))

  (use-package counsel-projectile
    :config
    (counsel-projectile-mode 1))
#+END_SRC

Prescient for faster candidate filtering.
#+BEGIN_SRC emacs-lisp
  (use-package prescient
    :config
    (prescient-persist-mode))
  (use-package ivy-prescient
    :after ivy
    :config
    (ivy-prescient-mode))
  (use-package company-prescient
    :after company
    :config
    (company-prescient-mode))
#+END_SRC

Magit for git integration.
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC
* Programming
#+BEGIN_SRC emacs-lisp
  ;; Add line numbers in all programming modes.
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  ;; Highlight numerals
  (use-package highlight-numbers
    :config
    (add-hook 'prog-mode-hook 'highlight-numbers-mode))

  ;; flycheck for all languages to do diagnostics in-line.
  (use-package flycheck
    :init (global-flycheck-mode))

  ;; YAML
  (use-package yaml-mode)

  ;; Web Mode for all things web.
  (use-package web-mode)

  ;; TypeScript
  (use-package tide
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           (before-save . tide-format-before-save)))
  ;; TSX
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  (add-hook 'web-mode-hook
            (lambda ()
              (when (string-equal "tsx" (file-name-extension buffer-file-name))
                (setup-tide-mode))))
  ;; enable typescript-tslint checker
  (flycheck-add-mode 'typescript-tslint 'web-mode)
#+END_SRC
** Terminal
Use ~vterm~ as terminal inside emacs.
Use ~C-c C-c~ to send ~C-c~ to terminal.
#+BEGIN_SRC emacs-lisp
  (use-package vterm)
#+END_SRC
