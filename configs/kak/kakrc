# Remove clippy from info window
set global ui_options ncurses_assistant=none

# Add relative or absolute line numbers
# add-highlighter global/ number-lines -relative
add-highlighter global/ number-lines
set-face global LineNumbers rgb:4c566a,default
set-face global LineNumberCursor rgb:5e81ac,default

# whitespace
add-highlighter global/ show-whitespaces
set-face global Whitespace rgb:4c566a,default+f

# rulers on columns 81 and 101
add-highlighter global/ column 81 default,rgb:3b4252
add-highlighter global/ column 101 default,rgb:3b4252

# Use c-w to delete previous word in insert mode
map global insert <c-w> '<a-;>:exec -draft bd<ret>'

# Use ripgrep for grepping
set global grepcmd 'rg --column'

# Broot is configured in the autoload directory
map global user b ':  toggle-broot<ret>' -docstring 'browse files with broot'
# Ranger is configured in the autoload directory
map global user r ':  toggle-ranger<ret>' -docstring 'browse files with ranger'

# tig is configured in the autoload directory
map global user t ': enter-user-mode tig<ret>' -docstring 'tig'

# git gutter
map global user l ': git show-diff<ret>' -docstring 'gitgutter'

# Show matching characters (e.g. [])
# In normal mode:
add-highlighter global/ show-matching
# In insert mode:
declare-option -hidden range-specs show_matching_range
hook global -group kakrc-matching-ranges InsertChar '[[\](){}<>]' %{
    eval -draft %{
        try %{
            exec '<esc>;hm<a-k>..<ret>;'
            set window show_matching_range %val{timestamp} "%val{selection_desc}|MatchingChar"
        } catch %{
            set window show_matching_range 0
        }
        hook window -once InsertChar '[^[\](){}<>]' %{
            set window show_matching_range 0
        }
        hook window -once ModeChange .* %{
            set window show_matching_range 0
        }
        hook window -once InsertMove .* %{
            set window show_matching_range 0
        }
    }
}
add-highlighter global/ ranges show_matching_range

# All kinds of case-insensitive searches
map -docstring 'case insensitive search' global user '/' /(?i)
map -docstring 'case insensitive backward search' global user '<a-/>' <a-/>(?i)
map -docstring 'case insensitive extend search' global user '?' ?(?i)
map -docstring 'case insensitive backward extend-search' global user '<a-?>' <a-?>(?i)

# Go to alternative file (e.g. test file)
map global goto m '<esc>: alt<ret>' -docstring 'alternative file'

# A user mode for development related tasks like lsp and formatting
declare-user-mode development

# Plugin manager and plugins
source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "https://github.com/TeddyDD/kakoune-wiki" config %{
    wiki-setup %sh{ echo ~/.nb/home }
}

plug "abuffseagull/nord.kak" theme %{ colorscheme nord }

plug "https://github.com/schemar/kak-jsts" config %{
    hook global WinSetOption filetype=(javascript|typescript) %{
        alias window tsformat format-prettier
        map window development l -docstring 'lint' ': lint<ret>'
        map window development f -docstring 'format' ': tsformat<ret>'
    }
}

plug "https://github.com/occivink/kakoune-vertical-selection" config %{
    map -docstring 'vertical selection down' global user v     ': vertical-selection-down<ret>'
    map -docstring 'vertical selection up'   global user <a-v> ': vertical-selection-up<ret>'
    map -docstring 'vertical selection up and down' global user V     ': vertical-selection-up-and-down<ret>'
}

plug "https://github.com/krornus/kakoune-toggle-map" config %{
    toggle-map -docstring 'toggle search highlights' global user h hlsearch-on hlsearch-off

    define-command softwrap-on %{add-highlighter global/ wrap}
    define-command softwrap-off %{remove-highlighter global/wrap}
    toggle-map -docstring 'toggle soft wrap' global user w softwrap-on softwrap-off
}

plug "https://github.com/jjk96/kakoune-rainbow" config %{
    toggle-map -docstring 'toggle rainbow parantheses' global user [ rainbow rainbow-disable
}

plug "https://github.com/andreyorst/powerline.kak" defer powerline %{
    set-option global powerline_format 'git bufname filetype mode_info line_column position'
} config %{
    powerline-start
}

plug "https://github.com/andreyorst/fzf.kak" config %{
    map global user f ': fzf-mode<ret>' -docstring 'fuzzy find'
} defer fzf %{
    map global normal <c-p> ': fzf-mode<ret>'
    set-option global fzf_use_main_selection false
} defer fzf-file %{
    set-option global fzf_file_command 'fd --type f --hidden --exclude ".git/"'
    set-option global fzf_highlight_command 'bat --style=numbers --color=always {}'
} 

plug "https://github.com/h-youhei/kakoune-surround" config %{
    # Surround functionality
    declare-user-mode surround
    map global surround s ': surround<ret>' -docstring 'surround'
    map global surround c ': change-surround<ret>' -docstring 'change'
    map global surround d ': delete-surround<ret>' -docstring 'delete'
    map global surround t ': select-surrounding-tag<ret>' -docstring 'select tag'
    map global user s ': enter-user-mode surround<ret>' -docstring 'surround'
}

plug "listentolist/kakoune-table" domain "gitlab.com" config %{
    # Table mode to edit tables in markdown
    # Use o/O to add a new row
    # Use tab/<s-tab> to move between cells
    # Use <a-hjkl> to move columns/rows
    # Auto-aligns table when exiting insert mode
    map global user e ': table-toggle<ret>' -docstring 'toggle table mode'
}


plug "https://github.com/ul/kak-lsp" tag "v11.0.1" config %{
    # uncomment to enable debugging
    # eval %sh{echo ${kak_opt_lsp_cmd} >> /tmp/kak-lsp.log}
    # set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

    # this is not necessary; the `lsp-enable-window` will take care of it
    # eval %sh{${kak_opt_lsp_cmd} --kakoune -s $kak_session}

    set global lsp_diagnostic_line_error_sign '║'
    set global lsp_diagnostic_line_warning_sign '┊'

    map global development d ': lsp-definition<ret>' -docstring 'go to definition'
    map global development r ': lsp-references<ret>' -docstring 'show references'
    map global development i ': lsp-implementation<ret>' -docstring 'show implementations'
    map global development R ': lsp-rename-prompt<ret>' -docstring 'rename'
    map global development e ': lsp-find-error --include-warnings<ret>' -docstring 'go to next error/warning'
    map global development p ': lsp-find-error --previous --include-warnings<ret>' -docstring 'go to previous error/warning'
    map global user d ': enter-user-mode development<ret>' -docstring 'development'

    define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }
    hook global WinSetOption filetype=(c|cpp|cc|rust|javascript|typescript) %{
        set-option window lsp_auto_highlight_references true
        set-option window lsp_hover_anchor false
        lsp-auto-hover-enable
        echo -debug "Enabling LSP for filtetype %opt{filetype}"
        lsp-enable-window
    }

    hook global WinSetOption filetype=(rust) %{
        set window lsp_server_configuration rust.clippy_preference="on"
    }

    hook global WinSetOption filetype=rust %{
        hook window BufWritePre .* %{
            evaluate-commands %sh{
                test -f rustfmt.toml && printf lsp-formatting-sync
            }
        }
    }

    hook global KakEnd .* lsp-exit
}

# Source a local project kak config if it exists
# Do this last to ensure it overwrites everything else
# Make sure it is set as a kak filetype
hook global BufCreate (.*/)?(\.kakrc\.local) %{
    set-option buffer filetype kak
}
try %{ source .kakrc.local }
